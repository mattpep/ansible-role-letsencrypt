---
- include_tasks: dependencies.yml
- include_tasks: directories.yml
- include_tasks: account.yml

- name: Create Domain key
  openssl_privatekey:
    path: "{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.key"

- name: Create domain public key
  openssl_publickey:
    path: "{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.pub"
    privatekey_path: "{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.key"

- name: Create Certificate Signing Request
  openssl_csr:
    privatekey_path: "{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.key"
    path: "{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.csr"
    subject_alt_name:
      "{%- for certdomain in letsencrypt_cert_domains -%}DNS:{{ certdomain }}
        {%- if loop.index != loop.length -%},{%- endif -%}
      {%- endfor -%}"
      # {% if letsencrypt_cert_domains|length ==1 %}{{ omit }}{% else %}
      # {{ letsencrypt_cert_domains }}{% endif %}

- name: check whether cert currently exists
  stat:
    path: '{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.crt'
  register: letsencrypt_current_cert
  changed_when: false

- name: Extract issuing CA from current cert
  openssl_certificate_info:
    path: "{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.crt"
  register: current_cert
  when: letsencrypt_current_cert.stat.exists

- name: Remove staging cert if in prod mode
  file:
    path: '{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.crt'
    state: absent
  when: letsencrypt_prod_cert and current_cert.authority_cert_issuer|contains('Fake')

  # TODO: do we need to hit the API if we're not going to update the cert (i.e. if it still has lots of validity remaining)
- name: Issue letsencrypt Challenge
  acme_certificate:
    acme_directory: "{{ letsencrypt_api_endpoint }}"
    acme_version: 2
    account_key: "{{ letsencrypt_certs_dir }}/account.key"
    challenge: http-01
    csr: '{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.csr'
    dest: '{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.crt'
  register: letsencrypt_challenge

- name: Store validation tokens # noqa 503
  copy:                         # this can't be a handler because we need it to happen immediately
    # item['resource'] has the prefix '/.well-known/acme-challenge' so we only need to prepend the sitedir here
    dest: "{{ letsencrypt_challenge_dir }}/{{ item.value['http-01']['resource'] }}"
    content: "{{ item.value['http-01']['resource_value'] }}"
  with_dict: "{{ letsencrypt_challenge['challenge_data'] }}"
  when: letsencrypt_challenge.changed

- name: Validate Challenge and save certificate
  acme_certificate:
    acme_directory: "{{ letsencrypt_api_endpoint }}"
    acme_version: 2
    account_key: "{{ letsencrypt_certs_dir }}/account.key"
    challenge: http-01
    csr: '{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.csr'
    dest: '{{ letsencrypt_certs_dir }}/{{ letsencrypt_first_domain }}.crt'
    data: "{{ letsencrypt_challenge }}"
  register: certificate

- name: restart nginx # noqa 503
                      # this can't be a handler because it's a compound condition (not just a simple 'changed')
  debug: msg="Reloading nginx due to changed certificate"
  when: certificate.changed and letsencrypt_handle_nginx
  notify:
    - restart nginx
